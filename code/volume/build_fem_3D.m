% build Laplace Beltrami operator in 3D% (C) Dan Raviv 2010function [sA sB] = build_fem_3D(myMesh)n = length(myMesh.X2);A=sparse(n,n);B=sparse(n,n);countABpairs=sparse(n,n);%diagA=A;%zeros(n,1);%diagB=B%;zeros(n,1);countAB=zeros(n,1);integrals = calc_integrals();integrals_pairs=[2 1;3 1;4 1;4 2;4 3;3 2;1 1;2 2;3 3;4 4];[m n] = size(myMesh.elem);for i=1:m        waitbar(i/m);        vertices=myMesh.elem(i,[1:4]);        t1=[myMesh.X2(vertices(2))-myMesh.X2(vertices(1)) ; myMesh.Y2(vertices(2))-myMesh.Y2(vertices(1)) ; myMesh.Z2(vertices(2))-myMesh.Z2(vertices(1))];        t2=[myMesh.X2(vertices(3))-myMesh.X2(vertices(1)) ; myMesh.Y2(vertices(3))-myMesh.Y2(vertices(1)) ; myMesh.Z2(vertices(3))-myMesh.Z2(vertices(1))];        t3=[myMesh.X2(vertices(4))-myMesh.X2(vertices(1)) ; myMesh.Y2(vertices(4))-myMesh.Y2(vertices(1)) ; myMesh.Z2(vertices(4))-myMesh.Z2(vertices(1))];                G=[ dot(t1,t1) dot(t1,t2) dot(t1,t3); dot(t2,t1) dot(t2,t2) dot(t2,t3); dot(t3,t1) dot(t3,t2) dot(t3,t3) ];        W = sqrt(det(G));        g=inv(G);        gt=g(:);                       for j=1:6            v1 = myMesh.elem(i, integrals_pairs(j,1));            v2 = myMesh.elem(i, integrals_pairs(j,2));            for k=1:10 integral(k) = integrals{k}( integrals_pairs(j,1) , integrals_pairs(j,2) ); end            A(v1,v2) = A(v1,v2) + W * integral([1:9]) * gt;            B(v1,v2) = B(v1,v2) + W * integral(10);            A(v2,v1) = A(v2,v1) + W * integral([1:9]) * gt;            B(v2,v1) = B(v2,v1) + W * integral(10);            countABpairs(v1,v2) = countABpairs(v1,v2) + 1;        end                for j=7:10            v1 = myMesh.elem(i, integrals_pairs(j,1));            v2 = myMesh.elem(i, integrals_pairs(j,2));            for k=1:10 integral(k) = integrals{k}( integrals_pairs(j,1) , integrals_pairs(j,2) ); end            A(v1,v2) = A(v1,v2) + W * integral([1:9]) * gt;            B(v1,v2) = B(v1,v2) + W * integral(10);            countAB(v1,v2) = countABpairs(v1,v2) + 1;        end            end% loc = find(countABpairs>0);% A(loc)=A(loc)./countABpairs(loc);% B(loc)=B(loc)./countABpairs(loc);%A=A/2;%B=B/2;% diagA=diagA./countAB;% diagB=diagB./countAB;%A=A+sparse(diag(diagA));%B=B+sparse(diag(diagB));sA=(A+A')/2;sB=(B+B')/2;endfunction integrals = calc_integrals()integrals=[];syms u v w f1 f2 f3 f4 I df1du df2du df3du df4du df1dv df2dv df3dv df4dv df1dw df2dw df3dw df4dw;f1 = 1-u-v-w;f2 = u;f3 = v;f4 = w;df1du=diff(f1,u);df2du=diff(f2,u);df3du=diff(f3,u);df4du=diff(f4,u);df1dv=diff(f1,v);df2dv=diff(f2,v);df3dv=diff(f3,v);df4dv=diff(f4,v);df1dw=diff(f1,w);df2dw=diff(f2,w);df3dw=diff(f3,w);df4dw=diff(f4,w);I = [ df1du*df1du df1du*df2du df1du*df3du df1du*df4du; df2du*df1du df2du*df2du df2du*df3du df2du*df4du; df3du*df1du df3du*df2du df3du*df3du df3du*df4du; df4du*df1du df4du*df2du df4du*df3du df4du*df4du ];integrals{1} = double( int( int( int(I, w , 0, 1-u-v) , v, 0 , 1-u ) , u , 0 , 1 ) );I = [ df1dv*df1du df1dv*df2du df1dv*df3du df1dv*df4du; df2dv*df1du df2dv*df2du df2dv*df3du df2dv*df4du; df3dv*df1du df3dv*df2du df3dv*df3du df3dv*df4du; df4dv*df1du df4dv*df2du df4dv*df3du df4dv*df4du ];integrals{2} = double( int( int( int(I , w , 0, 1-u-v) , v, 0 , 1-u ) , u , 0 , 1 ) );I = [ df1dw*df1du df1dw*df2du df1dw*df3du df1dw*df4du; df2dw*df1du df2dw*df2du df2dw*df3du df2dw*df4du; df3dw*df1du df3dw*df2du df3dw*df3du df3dw*df4du; df4dw*df1du df4dw*df2du df4dw*df3du df4dw*df4du ];integrals{3} = double( int( int( int(I , w , 0, 1-u-v) , v, 0 , 1-u ) , u , 0 , 1 ) );I = [ df1du*df1dv df1du*df2dv df1du*df3dv df1du*df4dv; df2du*df1dv df2du*df2dv df2du*df3dv df2du*df4dv; df3du*df1dv df3du*df2dv df3du*df3dv df3du*df4dv; df4du*df1dv df4du*df2dv df4du*df3dv df4du*df4dv ];integrals{4} = double( int( int( int(I , w , 0, 1-u-v) , v, 0 , 1-u ) , u , 0 , 1 ) );I = [ df1dv*df1dv df1dv*df2dv df1dv*df3dv df1dv*df4dv; df2dv*df1dv df2dv*df2dv df2dv*df3dv df2dv*df4dv; df3dv*df1dv df3dv*df2dv df3dv*df3dv df3dv*df4dv; df4dv*df1dv df4dv*df2dv df4dv*df3dv df4dv*df4dv ];integrals{5} = double( int( int( int(I , w , 0, 1-u-v) , v, 0 , 1-u ) , u , 0 , 1 ) );I = [ df1dw*df1dv df1dw*df2dv df1dw*df3dv df1dw*df4dv; df2dw*df1dv df2dw*df2dv df2dw*df3dv df2dw*df4dv; df3dw*df1dv df3dw*df2dv df3dw*df3dv df3dw*df4dv; df4dw*df1dv df4dw*df2dv df4dw*df3dv df4dw*df4dv ];integrals{6} = double( int( int( int(I , w , 0, 1-u-v) , v, 0 , 1-u ) , u , 0 , 1 ) );I = [ df1du*df1dw df1du*df2dw df1du*df3dw df1du*df4dw; df2du*df1dw df2du*df2dw df2du*df3dw df2du*df4dw; df3du*df1dw df3du*df2dw df3du*df3dw df3du*df4dw; df4du*df1dw df4du*df2dw df4du*df3dw df4du*df4dw ];integrals{7} = double( int( int( int(I , w , 0, 1-u-v) , v, 0 , 1-u ) , u , 0 , 1 ) );I = [ df1dv*df1dw df1dv*df2dw df1dv*df3dw df1dv*df4dw; df2dv*df1dw df2dv*df2dw df2dv*df3dw df2dv*df4dw; df3dv*df1dw df3dv*df2dw df3dv*df3dw df3dv*df4dw; df4dv*df1dw df4dv*df2dw df4dv*df3dw df4dv*df4dw ];integrals{8} = double( int( int( int(I , w , 0, 1-u-v) , v, 0 , 1-u ) , u , 0 , 1 ) );I = [ df1dw*df1dw df1dw*df2dw df1dw*df3dw df1dw*df4dw; df2dw*df1dw df2dw*df2dw df2dw*df3dw df2dw*df4dw; df3dw*df1dw df3dw*df2dw df3dw*df3dw df3dw*df4dw; df4dw*df1dw df4dw*df2dw df4dw*df3dw df4dw*df4dw ];integrals{9} = double( int( int( int(I , w , 0, 1-u-v) , v, 0 , 1-u ) , u , 0 , 1 ) );I = [ f1*f1 f1*f2 f1*f3 f1*f4; f2*f1 f2*f2 f2*f3 f2*f4; f3*f1 f3*f2 f3*f3 f3*f4; f4*f1 f4*f2 f4*f3 f4*f4];integrals{10} = double( int( int( int(I , w , 0, 1-u-v) , v, 0 , 1-u ) , u , 0 , 1 ) );end